version '1.0'

apply plugin: 'java'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile 'org.mockito:mockito-core:2.7.22'
    testCompile group: 'com.tngtech.java', name: 'junit-dataprovider', version: '1.10.0'
    testCompile 'org.junit.jupiter:junit-jupiter-api:5.0.0-M3'
}

task randomFile(type:JavaExec) {
    dependsOn 'build'

    String intFilePath = 'testRun/intFile'
    if (project.hasProperty('intFilePath')) {
        intFilePath = project.getProperty('intFilePath')
    }

    String intFileSize = ((int)Math.pow(2, 22)).toString()
    if (project.hasProperty('size')) {
        intFileSize = project.getProperty('size')
    }

    args = [intFilePath, intFileSize]

    main = 'pega.RandomIntFileGenerator'
    classpath = sourceSets.main.runtimeClasspath
}

task decodeRandomFile(type:JavaExec) {
    dependsOn 'build'

    String inputFilePath = 'testRun/intFile'
    if (project.hasProperty('inputFilePath')) {
        inputFilePath = project.getProperty('inputFilePath')
    }

    String outputFilePath = 'testRun/intFileDecoded'
    if (project.hasProperty('outputFilePath')) {
        outputFilePath = project.getProperty('outputFilePath')
    }

    args = [inputFilePath, outputFilePath]

    main = 'pega.DecodeIntBinaryFile'
    classpath = sourceSets.main.runtimeClasspath
}

task decodeResultFile(type:JavaExec) {
    dependsOn 'build'

    String inputFilePath = 'testRun/intFileSorted'
    if (project.hasProperty('inputFilePath')) {
        inputFilePath = project.getProperty('inputFilePath')
    }

    String outputFilePath = 'testRun/intFileSortedDecoded'
    if (project.hasProperty('outputFilePath')) {
        outputFilePath = project.getProperty('outputFilePath')
    }

    args = [inputFilePath, outputFilePath]

    main = 'pega.DecodeIntBinaryFile'
    classpath = sourceSets.main.runtimeClasspath
}

task sortIntFile(type:JavaExec) {
    dependsOn 'build'

    String inputFilePath = 'testRun/intFile'
    if (project.hasProperty('inputFilePath')) {
        inputFilePath = project.getProperty('inputFilePath')
    }

    String intFileSize = ((int)Math.pow(2, 22)).toString()
    if (project.hasProperty('size')) {
        intFileSize = project.getProperty('size')
    }

    String outputFilePath = 'testRun/intFileSorted'
    if (project.hasProperty('outputFilePath')) {
        inputFilePath = project.getProperty('outputFilePath')
    }

    String maxMemory = '1000000'
    if (project.hasProperty('maxMemory')) {
        maxMemory = project.getProperty('maxMemory')
    }

    args = [inputFilePath, intFileSize, outputFilePath, maxMemory]

    main = 'pega.MergeSortFile'
    classpath = sourceSets.main.runtimeClasspath
}
